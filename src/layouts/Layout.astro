---
import { ClientRouter } from "astro:transitions";
import Footer from "../components/Footer.astro";
import Navbar from "../components/Navbar.astro";
import "../styles/global.css";

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<html lang="en">
  <head>
    <ClientRouter />
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <Navbar />
    <slot />
    <Footer />
  </body>
</html>

<script>
  import gsap from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import { SplitText } from "gsap/SplitText";

  gsap.registerPlugin(SplitText, ScrollTrigger);
  let ctx: gsap.Context | null = null;
  document.addEventListener("astro:page-load", () => {
    ScrollTrigger.disable(false);
    ScrollTrigger.enable();
    ctx && ctx.revert();
    ctx = gsap.context(() => {
      // Hero Animations
      const heroTitle = new SplitText(".hero-title", {
        type: "chars",
      });
      const heroSubtitle = new SplitText(".hero-subtitle", {
        type: "words",
      });
      gsap.from(heroTitle.chars, {
        duration: 1,
        opacity: 0,
        y: -20,
        ease: "power2.out",
        stagger: 0.07,
      });
      gsap.from(heroSubtitle.words, {
        duration: 1,
        opacity: 0,
        y: -20,
        ease: "power2.out",
        delay: 0.25,
        stagger: 0.07,
      });

      // Socials Animation
      gsap.from(".social-button", {
        duration: 1,
        opacity: 0,
        y: -20,
        ease: "power2.out",
        delay: 0.5,
        stagger: 0.1,
      });

      // About Animation
      const aboutTitle = new SplitText(".about-title", {
        type: "chars",
      });
      gsap.from(aboutTitle.chars, {
        scrollTrigger: {
          trigger: ".about-box",
          start: "top 70%",
        },
        duration: 1,
        opacity: 0,
        yPercent: -100,
        ease: "power2.out",
        stagger: 0.05,
      });
      gsap.from([".about-box", ".about-text"], {
        scrollTrigger: {
          trigger: ".about-box",
          start: "top 70%",
        },
        duration: 1,
        opacity: 0,
        y: -20,
        ease: "power2.out",
        delay: 0.25,
        stagger: 0.1,
      });

      // Stacks Animation
      const stackTitle = new SplitText(".stack-title", {
        type: "chars",
      });
      gsap.from(stackTitle.chars, {
        scrollTrigger: {
          trigger: ".stack-card",
          start: "top 70%",
        },
        duration: 1,
        opacity: 0,
        yPercent: -100,
        ease: "power2.out",
        stagger: 0.05,
      });
      gsap.from(".stack-card", {
        scrollTrigger: {
          trigger: ".stack-card",
          start: "top 70%",
        },
        duration: 1,
        opacity: 0,
        yPercent: -50,
        ease: "power2.out",
        stagger: 0.05,
      });

      // Projects Animation
      const projectTitle = new SplitText(".project-title", {
        type: "chars",
      });
      const projectSubtitle = new SplitText(".project-subtitle", {
        type: "words",
      });
      gsap.from([projectTitle.chars, projectSubtitle.words], {
        scrollTrigger: {
          trigger: ".project-card",
          start: "top 60%",
        },
        duration: 1,
        opacity: 0,
        yPercent: -100,
        ease: "power2.out",
        stagger: 0.05,
      });
      gsap.from(".project-card", {
        scrollTrigger: {
          trigger: ".project-card",
          start: "top 60%",
        },
        duration: 1,
        opacity: 0,
        yPercent: -20,
        ease: "power2.out",
        stagger: 0.1,
      });

      // Footer Animation
      gsap.from([".footer-icon", ".footer-text", ".footer-nav"], {
        scrollTrigger: {
          trigger: "footer",
          start: "top 80%",
        },
        duration: 2,
        opacity: 0,
        yPercent: -40,
        ease: "power2.out",
        stagger: 0.1,
      });

      // About Box Hover Animation
      ctx &&
        ctx.add(() => {
          const aboutBox = document.querySelector(".about-box") as HTMLElement;
          if (!aboutBox) return;
          aboutBox.addEventListener("mouseenter", () => {
            gsap.to([aboutBox, ".about-title"], {
              scale: 1.05,
              duration: 0.3,
              ease: "back.out(3)",
            });
          });
          aboutBox.addEventListener("mouseleave", () => {
            gsap.to([aboutBox, ".about-title"], {
              scale: 1,
              duration: 0.3,
              ease: "back.out(3)",
            });
          });
        });

      // Stack Card Hover Animation
      gsap.utils.toArray(".stack-card").forEach((section) => {
        const el = section as HTMLElement;
        el.addEventListener("mouseenter", () => {
          gsap.to(el, {
            scale: 1.05,
            duration: 0.3,
            ease: "back.out(3)",
          });
        });
        el.addEventListener("mouseleave", () => {
          gsap.to(el, {
            scale: 1,
            duration: 0.3,
            ease: "back.out(3)",
          });
        });
      });

      // Socials and Projects Hover Animation
      gsap.utils.toArray(".social-button").forEach((section) => {
        const el = section as HTMLElement;
        el.addEventListener("mouseenter", () => {
          gsap.to(el, {
            scale: 1.2,
            duration: 0.3,
            ease: "back.out(3)",
          });
        });
        el.addEventListener("mouseleave", () => {
          gsap.to(el, {
            scale: 1,
            duration: 0.3,
            ease: "back.out(3)",
          });
        });
      });
      gsap.utils.toArray(".project-card").forEach((section) => {
        const el = section as HTMLElement;
        el.addEventListener("mouseenter", () => {
          gsap.to(el, {
            scale: 1.05,
            duration: 0.3,
            ease: "back.out(3)",
          });
        });
        el.addEventListener("mouseleave", () => {
          gsap.to(el, {
            scale: 1,
            duration: 0.3,
            ease: "back.out(3)",
          });
        });
      });
    });
  });
</script>
