---
import { ClientRouter } from "astro:transitions";
import Navbar from "../components/Navbar.astro";
import "../styles/global.css";

interface Props {
  title: string;
  description: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const ogImageURL = new URL(
  "/open-graph" +
    (Astro.url.pathname === "/"
      ? "/index"
      : Astro.url.pathname.replace(/\/$/, "")) +
    ".png",
  Astro.url.origin,
);
const { title, description } = Astro.props;
---

<html lang="en">
  <head>
    <ClientRouter />
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="icon" type="image/png" href="/favicon-96x96.png" sizes="96x96" />
    <link rel="shortcut icon" href="/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <meta name="apple-mobile-web-app-title" content="wintertia" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="viewport" content="width=device-width" />
    <meta
      name="google-site-verification"
      content="1T00ZInpDNwc0kYdBxDcY11-HeciLPEU4SIBOg0i_0U"
    />
    <meta name="author" content="wintertia" />
    <meta name="generator" content={Astro.generator} />
    <meta name="application-name" content={title} />

    <!-- HTML Meta Tags -->
    <title>{title}</title>
    <meta name="description" content={description} />

    <!-- Facebook Meta Tags -->
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImageURL} />

    <!-- Twitter Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta property="twitter:domain" content="wintertia.pages.dev" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={ogImageURL} />
  </head>
  <body>
    <div id="smooth-wrapper">
      <Navbar />
      <div id="smooth-content">
        <slot />
      </div>
    </div>
  </body>
</html>

<script>
  import gsap from "gsap";
  import { ScrollSmoother } from "gsap/ScrollSmoother";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import { SplitText } from "gsap/SplitText";
  await document.fonts.ready;

  /*
  i know this is like really unoptimized but it works yeah
  someone please help me :(
  */

  gsap.registerPlugin(SplitText, ScrollTrigger, ScrollSmoother);
  let ctx: gsap.Context | null = null;
  document.addEventListener("astro:page-load", () => {
    requestAnimationFrame(() => {
      const smoother = ScrollSmoother.get();
      if (smoother) smoother.kill();
      ScrollTrigger.clearScrollMemory();
      ScrollTrigger.refresh();
      ctx && ctx.revert();
      ctx = gsap.context(() => {
        ScrollSmoother.create({
          smooth: 1.0,
          effects: true,
        });

        // Hero Animations
        const heroTitleEl = document.querySelector(".hero-title");
        const heroSubtitleEl = document.querySelector(".hero-subtitle");
        if (heroTitleEl && heroSubtitleEl) {
          const heroTitle = new SplitText(heroTitleEl, { type: "chars" });
          const heroSubtitle = new SplitText(heroSubtitleEl, { type: "words" });
          gsap.from(heroTitle.chars, {
            duration: 1,
            opacity: 0,
            y: -20,
            ease: "power2.out",
            stagger: 0.07,
          });
          gsap.from(heroSubtitle.words, {
            duration: 1,
            opacity: 0,
            y: -20,
            ease: "power2.out",
            delay: 0.25,
            stagger: 0.07,
          });
        }

        // Socials Animation
        const socialButtons = document.querySelectorAll(".social-button");
        if (socialButtons.length > 0) {
          gsap.from(socialButtons, {
            duration: 1,
            opacity: 0,
            y: -20,
            ease: "power2.out",
            delay: 0.5,
            stagger: 0.1,
          });
        }

        // About Animation
        const aboutTitleEl = document.querySelector(".about-title");
        const aboutBoxEl = document.querySelector(".about-box");
        if (aboutTitleEl || aboutBoxEl) {
          const aboutTitle = new SplitText(aboutTitleEl, { type: "chars" });
          gsap.from(aboutTitle.chars, {
            scrollTrigger: {
              trigger: aboutBoxEl,
              start: "top 70%",
            },
            duration: 1,
            opacity: 0,
            yPercent: -100,
            ease: "power2.out",
            stagger: 0.05,
          });
          gsap.from([".about-box", ".about-text"], {
            scrollTrigger: {
              trigger: aboutBoxEl,
              start: "top 70%",
            },
            duration: 1,
            opacity: 0,
            yPercent: -20,
            ease: "power2.out",
            delay: 0.25,
            stagger: 0.1,
          });
        }

        // About Animation 2
        const aboutTitleEl2 = document.querySelector(".about-title-2");
        const aboutCard2 = document.querySelector(".about-card-2");
        if (aboutTitleEl2 && aboutCard2) {
          const aboutTitle = new SplitText(aboutTitleEl2, { type: "chars" });
          gsap.from(aboutTitle.chars, {
            scrollTrigger: {
              trigger: aboutCard2,
              start: "top 70%",
            },
            duration: 1,
            opacity: 0,
            yPercent: -100,
            ease: "power2.out",
            stagger: 0.05,
          });
          gsap.from([".about-card-2"], {
            scrollTrigger: {
              trigger: aboutCard2,
              start: "top 70%",
            },
            duration: 1,
            opacity: 0,
            yPercent: -20,
            ease: "power2.out",
            delay: 0.25,
            stagger: 0.1,
          });
        }

        // Stacks Animation
        const stackTitleEl = document.querySelector(".stack-title");
        const stackSubtitleEl = document.querySelector(".stack-subtitle");
        const stackCards = document.querySelectorAll(".stack-card");
        if (stackTitleEl && stackCards.length > 0) {
          const stackTitle = new SplitText(stackTitleEl, { type: "chars" });
          gsap.from(stackTitle.chars, {
            scrollTrigger: {
              trigger: stackCards[0],
              start: "top 70%",
            },
            duration: 1,
            opacity: 0,
            yPercent: -100,
            ease: "power2.out",
            stagger: 0.05,
          });
        }
        if (stackSubtitleEl && stackCards.length > 0) {
          const stackSubtitle = new SplitText(stackSubtitleEl, {
            type: "words",
          });
          gsap.from(stackSubtitle.words, {
            scrollTrigger: {
              trigger: stackCards[0],
              start: "top 70%",
            },
            duration: 1,
            opacity: 0,
            yPercent: -100,
            ease: "power2.out",
            stagger: 0.05,
          });
        }
        if (stackCards.length > 0) {
          gsap.from(stackCards, {
            scrollTrigger: {
              trigger: stackCards[0],
              start: "top 70%",
            },
            duration: 1,
            opacity: 0,
            yPercent: -50,
            ease: "power2.out",
            stagger: 0.05,
          });
        }

        // Projects Animation
        const projectTitleEl = document.querySelector(".project-title");
        const projectSubtitleEl = document.querySelector(".project-subtitle");
        const projectCards = document.querySelectorAll(".project-card");
        if (projectTitleEl && projectCards.length > 0) {
          const projectTitle = new SplitText(projectTitleEl, { type: "chars" });
          gsap.from(projectTitle.chars, {
            scrollTrigger: {
              trigger: projectCards[0],
              start: "top 70%",
            },
            duration: 1,
            opacity: 0,
            yPercent: -100,
            ease: "power2.out",
            stagger: 0.05,
          });
        }
        if (projectSubtitleEl && projectCards.length > 0) {
          const projectSubtitle = new SplitText(projectSubtitleEl, {
            type: "words",
          });
          gsap.from(projectSubtitle.words, {
            scrollTrigger: {
              trigger: projectCards[0],
              start: "top 70%",
            },
            duration: 1,
            opacity: 0,
            yPercent: -100,
            ease: "power2.out",
            stagger: 0.05,
          });
        }
        if (projectCards.length > 0) {
          gsap.from(projectCards, {
            scrollTrigger: {
              trigger: projectCards[0],
              start: "top 70%",
            },
            duration: 1,
            opacity: 0,
            yPercent: -20,
            ease: "power2.out",
            stagger: 0.1,
          });
        }

        // Footer Animation
        const footerElements = document.querySelectorAll(
          ".footer-icon, .footer-text, .footer-nav",
        );
        if (footerElements.length > 0) {
          gsap.from(footerElements, {
            scrollTrigger: {
              trigger: "footer",
            },
            duration: 2,
            opacity: 0,
            yPercent: -40,
            ease: "power2.out",
            stagger: 0.1,
          });
        }
      });
    });
  });
</script>
